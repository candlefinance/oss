///
/// JSendMethod.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "SendMethod.hpp"

namespace margelo::nitro::send {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "SendMethod" and the the Kotlin enum "SendMethod".
   */
  struct JSendMethod final: public jni::JavaClass<JSendMethod> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/candlefinance_send/SendMethod;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum SendMethod.
     */
    [[maybe_unused]]
    SendMethod toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<SendMethod>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JSendMethod> fromCpp(SendMethod value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldGET = clazz->getStaticField<JSendMethod>("GET");
      static const auto fieldPOST = clazz->getStaticField<JSendMethod>("POST");
      static const auto fieldPUT = clazz->getStaticField<JSendMethod>("PUT");
      static const auto fieldDELETE = clazz->getStaticField<JSendMethod>("DELETE");
      static const auto fieldPATCH = clazz->getStaticField<JSendMethod>("PATCH");
      static const auto fieldHEAD = clazz->getStaticField<JSendMethod>("HEAD");
      static const auto fieldOPTIONS = clazz->getStaticField<JSendMethod>("OPTIONS");
      static const auto fieldCONNECT = clazz->getStaticField<JSendMethod>("CONNECT");
      static const auto fieldTRACE = clazz->getStaticField<JSendMethod>("TRACE");
      
      switch (value) {
        case SendMethod::GET:
          return clazz->getStaticFieldValue(fieldGET);
        case SendMethod::POST:
          return clazz->getStaticFieldValue(fieldPOST);
        case SendMethod::PUT:
          return clazz->getStaticFieldValue(fieldPUT);
        case SendMethod::DELETE:
          return clazz->getStaticFieldValue(fieldDELETE);
        case SendMethod::PATCH:
          return clazz->getStaticFieldValue(fieldPATCH);
        case SendMethod::HEAD:
          return clazz->getStaticFieldValue(fieldHEAD);
        case SendMethod::OPTIONS:
          return clazz->getStaticFieldValue(fieldOPTIONS);
        case SendMethod::CONNECT:
          return clazz->getStaticFieldValue(fieldCONNECT);
        case SendMethod::TRACE:
          return clazz->getStaticFieldValue(fieldTRACE);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::runtime_error("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::send
