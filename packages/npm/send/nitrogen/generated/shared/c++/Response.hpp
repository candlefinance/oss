///
/// Response.hpp
/// Wed Aug 28 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <unordered_map>
#include <string>
#include <optional>

namespace margelo::nitro::send {

  /**
   * A struct which can be represented as a JavaScript object (Response).
   */
  struct Response {
  public:
    double statusCode     SWIFT_PRIVATE;
    std::unordered_map<std::string, std::string> headerParameters     SWIFT_PRIVATE;
    std::optional<std::string> body     SWIFT_PRIVATE;

  public:
    explicit Response(double statusCode, std::unordered_map<std::string, std::string> headerParameters, std::optional<std::string> body): statusCode(statusCode), headerParameters(headerParameters), body(body) {}
  };

} // namespace margelo::nitro::send

namespace margelo::nitro {

  using namespace margelo::nitro::send;

  // C++ Response <> JS Response (object)
  template <>
  struct JSIConverter<Response> {
    static inline Response fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Response(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "statusCode")),
        JSIConverter<std::unordered_map<std::string, std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headerParameters")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "body"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Response& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "statusCode", JSIConverter<double>::toJSI(runtime, arg.statusCode));
      obj.setProperty(runtime, "headerParameters", JSIConverter<std::unordered_map<std::string, std::string>>::toJSI(runtime, arg.headerParameters));
      obj.setProperty(runtime, "body", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.body));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "statusCode"))) return false;
      if (!JSIConverter<std::unordered_map<std::string, std::string>>::canConvert(runtime, obj.getProperty(runtime, "headerParameters"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "body"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
