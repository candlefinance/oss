///
/// HybridCallbackSpec.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <functional>
#include <NitroModules/AnyMap.hpp>

namespace margelo::nitro::callback {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Callback`
   * Inherit this class to create instances of `HybridCallbackSpec` in C++.
   * @example
   * ```cpp
   * class HybridCallback: public HybridCallbackSpec {
   *   // ...
   * };
   * ```
   */
  class HybridCallbackSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridCallbackSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridCallbackSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual void onEvent(const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& notify) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Callback";
  };

} // namespace margelo::nitro::callback
