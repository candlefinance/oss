///
/// Request.hpp
/// Wed Aug 28 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Parameters` to properly resolve imports.
namespace margelo::nitro::send { struct Parameters; }

#include <string>
#include "Parameters.hpp"
#include <optional>
#include <vector>

namespace margelo::nitro::send {

  /**
   * A struct which can be represented as a JavaScript object (Request).
   */
  struct Request {
  public:
    std::string baseURL     SWIFT_PRIVATE;
    std::string path     SWIFT_PRIVATE;
    Parameters query     SWIFT_PRIVATE;
    Parameters header     SWIFT_PRIVATE;
    std::string method     SWIFT_PRIVATE;
    std::optional<std::string> body     SWIFT_PRIVATE;
    std::vector<std::string> utf8ContentTypes     SWIFT_PRIVATE;

  public:
    explicit Request(std::string baseURL, std::string path, Parameters query, Parameters header, std::string method, std::optional<std::string> body, std::vector<std::string> utf8ContentTypes): baseURL(baseURL), path(path), query(query), header(header), method(method), body(body), utf8ContentTypes(utf8ContentTypes) {}
  };

} // namespace margelo::nitro::send

namespace margelo::nitro {

  using namespace margelo::nitro::send;

  // C++ Request <> JS Request (object)
  template <>
  struct JSIConverter<Request> {
    static inline Request fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Request(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "baseURL")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "path")),
        JSIConverter<Parameters>::fromJSI(runtime, obj.getProperty(runtime, "query")),
        JSIConverter<Parameters>::fromJSI(runtime, obj.getProperty(runtime, "header")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "method")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "body")),
        JSIConverter<std::vector<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "utf8ContentTypes"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Request& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "baseURL", JSIConverter<std::string>::toJSI(runtime, arg.baseURL));
      obj.setProperty(runtime, "path", JSIConverter<std::string>::toJSI(runtime, arg.path));
      obj.setProperty(runtime, "query", JSIConverter<Parameters>::toJSI(runtime, arg.query));
      obj.setProperty(runtime, "header", JSIConverter<Parameters>::toJSI(runtime, arg.header));
      obj.setProperty(runtime, "method", JSIConverter<std::string>::toJSI(runtime, arg.method));
      obj.setProperty(runtime, "body", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.body));
      obj.setProperty(runtime, "utf8ContentTypes", JSIConverter<std::vector<std::string>>::toJSI(runtime, arg.utf8ContentTypes));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "baseURL"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "path"))) return false;
      if (!JSIConverter<Parameters>::canConvert(runtime, obj.getProperty(runtime, "query"))) return false;
      if (!JSIConverter<Parameters>::canConvert(runtime, obj.getProperty(runtime, "header"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "method"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "body"))) return false;
      if (!JSIConverter<std::vector<std::string>>::canConvert(runtime, obj.getProperty(runtime, "utf8ContentTypes"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
