///
/// Balance.hpp
/// Sat Aug 31 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `CurrencyAmount` to properly resolve imports.
namespace margelo::nitro::financekit { struct CurrencyAmount; }
// Forward declaration of `FinanceKitCreditDebitIndicator` to properly resolve imports.
namespace margelo::nitro::financekit { enum class FinanceKitCreditDebitIndicator; }

#include "CurrencyAmount.hpp"
#include <string>
#include "FinanceKitCreditDebitIndicator.hpp"

namespace margelo::nitro::financekit {

  /**
   * A struct which can be represented as a JavaScript object (Balance).
   */
  struct Balance {
  public:
    CurrencyAmount amount     SWIFT_PRIVATE;
    std::string asOfDate     SWIFT_PRIVATE;
    FinanceKitCreditDebitIndicator creditDebitIndicator     SWIFT_PRIVATE;

  public:
    explicit Balance(CurrencyAmount amount, std::string asOfDate, FinanceKitCreditDebitIndicator creditDebitIndicator): amount(amount), asOfDate(asOfDate), creditDebitIndicator(creditDebitIndicator) {}
  };

} // namespace margelo::nitro::financekit

namespace margelo::nitro {

  using namespace margelo::nitro::financekit;

  // C++ Balance <> JS Balance (object)
  template <>
  struct JSIConverter<Balance> {
    static inline Balance fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Balance(
        JSIConverter<CurrencyAmount>::fromJSI(runtime, obj.getProperty(runtime, "amount")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "asOfDate")),
        JSIConverter<FinanceKitCreditDebitIndicator>::fromJSI(runtime, obj.getProperty(runtime, "creditDebitIndicator"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Balance& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "amount", JSIConverter<CurrencyAmount>::toJSI(runtime, arg.amount));
      obj.setProperty(runtime, "asOfDate", JSIConverter<std::string>::toJSI(runtime, arg.asOfDate));
      obj.setProperty(runtime, "creditDebitIndicator", JSIConverter<FinanceKitCreditDebitIndicator>::toJSI(runtime, arg.creditDebitIndicator));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<CurrencyAmount>::canConvert(runtime, obj.getProperty(runtime, "amount"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "asOfDate"))) return false;
      if (!JSIConverter<FinanceKitCreditDebitIndicator>::canConvert(runtime, obj.getProperty(runtime, "creditDebitIndicator"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
