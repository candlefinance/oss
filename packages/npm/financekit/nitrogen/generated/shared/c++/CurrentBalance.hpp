///
/// CurrentBalance.hpp
/// Sat Aug 31 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Available` to properly resolve imports.
namespace margelo::nitro::financekit { struct Available; }
// Forward declaration of `Booked` to properly resolve imports.
namespace margelo::nitro::financekit { struct Booked; }
// Forward declaration of `AvailableAndBooked` to properly resolve imports.
namespace margelo::nitro::financekit { struct AvailableAndBooked; }

#include "Available.hpp"
#include "Booked.hpp"
#include "AvailableAndBooked.hpp"

namespace margelo::nitro::financekit {

  /**
   * A struct which can be represented as a JavaScript object (CurrentBalance).
   */
  struct CurrentBalance {
  public:
    Available available     SWIFT_PRIVATE;
    Booked booked     SWIFT_PRIVATE;
    AvailableAndBooked availableAndBooked     SWIFT_PRIVATE;

  public:
    explicit CurrentBalance(Available available, Booked booked, AvailableAndBooked availableAndBooked): available(available), booked(booked), availableAndBooked(availableAndBooked) {}
  };

} // namespace margelo::nitro::financekit

namespace margelo::nitro {

  using namespace margelo::nitro::financekit;

  // C++ CurrentBalance <> JS CurrentBalance (object)
  template <>
  struct JSIConverter<CurrentBalance> {
    static inline CurrentBalance fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return CurrentBalance(
        JSIConverter<Available>::fromJSI(runtime, obj.getProperty(runtime, "available")),
        JSIConverter<Booked>::fromJSI(runtime, obj.getProperty(runtime, "booked")),
        JSIConverter<AvailableAndBooked>::fromJSI(runtime, obj.getProperty(runtime, "availableAndBooked"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const CurrentBalance& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "available", JSIConverter<Available>::toJSI(runtime, arg.available));
      obj.setProperty(runtime, "booked", JSIConverter<Booked>::toJSI(runtime, arg.booked));
      obj.setProperty(runtime, "availableAndBooked", JSIConverter<AvailableAndBooked>::toJSI(runtime, arg.availableAndBooked));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<Available>::canConvert(runtime, obj.getProperty(runtime, "available"))) return false;
      if (!JSIConverter<Booked>::canConvert(runtime, obj.getProperty(runtime, "booked"))) return false;
      if (!JSIConverter<AvailableAndBooked>::canConvert(runtime, obj.getProperty(runtime, "availableAndBooked"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
