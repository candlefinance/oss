///
/// JHybridSendSpec.cpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridSendSpec.hpp"

// Forward declaration of `SendResult` to properly resolve imports.
namespace margelo::nitro::send { struct SendResult; }
// Forward declaration of `SendResponse` to properly resolve imports.
namespace margelo::nitro::send { struct SendResponse; }
// Forward declaration of `SendParameters` to properly resolve imports.
namespace margelo::nitro::send { struct SendParameters; }
// Forward declaration of `SendError` to properly resolve imports.
namespace margelo::nitro::send { struct SendError; }
// Forward declaration of `SendErrorCode` to properly resolve imports.
namespace margelo::nitro::send { enum class SendErrorCode; }
// Forward declaration of `SendRequest` to properly resolve imports.
namespace margelo::nitro::send { struct SendRequest; }
// Forward declaration of `SendMethod` to properly resolve imports.
namespace margelo::nitro::send { enum class SendMethod; }

#include <future>
#include "SendResult.hpp"
#include <NitroModules/JPromise.hpp>
#include "JSendResult.hpp"
#include <optional>
#include "SendResponse.hpp"
#include "JSendResponse.hpp"
#include "SendParameters.hpp"
#include "JSendParameters.hpp"
#include <unordered_map>
#include <string>
#include "SendError.hpp"
#include "JSendError.hpp"
#include "SendErrorCode.hpp"
#include "JSendErrorCode.hpp"
#include "SendRequest.hpp"
#include "JSendRequest.hpp"
#include "SendMethod.hpp"
#include "JSendMethod.hpp"
#include <vector>

namespace margelo::nitro::send {

  jni::local_ref<JHybridSendSpec::jhybriddata> JHybridSendSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridSendSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridSendSpec::initHybrid),
    });
  }

  size_t JHybridSendSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::future<SendResult> JHybridSendSpec::send(const SendRequest& request) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JPromise::javaobject>(jni::alias_ref<JSendRequest> /* request */)>("send");
    auto result = method(_javaPart, JSendRequest::fromCpp(request));
    return [&]() {
      auto promise = std::make_shared<std::promise<SendResult>>();
      result->cthis()->addOnResolvedListener([=](const jni::global_ref<jni::JObject>& boxedResult) {
        auto result = jni::static_ref_cast<JSendResult>(boxedResult);
        promise->set_value(result->toCpp());
      });
      result->cthis()->addOnRejectedListener([=](const jni::global_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }

} // namespace margelo::nitro::send
