///
/// SendResult.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `SendResponse` to properly resolve imports.
namespace margelo::nitro::send { struct SendResponse; }
// Forward declaration of `SendError` to properly resolve imports.
namespace margelo::nitro::send { struct SendError; }

#include <optional>
#include "SendResponse.hpp"
#include "SendError.hpp"

namespace margelo::nitro::send {

  /**
   * A struct which can be represented as a JavaScript object (SendResult).
   */
  struct SendResult {
  public:
    std::optional<SendResponse> response     SWIFT_PRIVATE;
    std::optional<SendError> error     SWIFT_PRIVATE;

  public:
    explicit SendResult(std::optional<SendResponse> response, std::optional<SendError> error): response(response), error(error) {}
  };

} // namespace margelo::nitro::send

namespace margelo::nitro {

  using namespace margelo::nitro::send;

  // C++ SendResult <> JS SendResult (object)
  template <>
  struct JSIConverter<SendResult> {
    static inline SendResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SendResult(
        JSIConverter<std::optional<SendResponse>>::fromJSI(runtime, obj.getProperty(runtime, "response")),
        JSIConverter<std::optional<SendError>>::fromJSI(runtime, obj.getProperty(runtime, "error"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SendResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "response", JSIConverter<std::optional<SendResponse>>::toJSI(runtime, arg.response));
      obj.setProperty(runtime, "error", JSIConverter<std::optional<SendError>>::toJSI(runtime, arg.error));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<SendResponse>>::canConvert(runtime, obj.getProperty(runtime, "response"))) return false;
      if (!JSIConverter<std::optional<SendError>>::canConvert(runtime, obj.getProperty(runtime, "error"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
