///
/// HybridCacheSpec.hpp
/// Fri Aug 30 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridCacheSpec.hpp"

namespace margelo::nitro::cache {

  using namespace facebook;

  class JHybridCacheSpec final: public jni::HybridClass<JHybridCacheSpec, JHybridObject>,
                                public HybridCacheSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/candlefinance_cache/HybridCacheSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  private:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridCacheSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridCacheSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridCacheSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    void write(const std::string& key, const std::string& object) override;
    std::future<void> writeAsync(const std::string& key, const std::string& object) override;
    std::future<std::optional<std::string>> readAsync(const std::string& key) override;
    std::optional<std::string> read(const std::string& key) override;
    std::future<void> removeAsync(const std::string& key) override;
    void remove(const std::string& key) override;
    std::future<void> clearAsync() override;
    void clear() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridCacheSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::cache
