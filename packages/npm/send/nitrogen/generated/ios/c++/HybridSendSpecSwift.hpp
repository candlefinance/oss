///
/// HybridSendSpecSwift.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSendSpec.hpp"

// Forward declaration of `HybridSendSpecCxx` to properly resolve imports.
namespace candlefinance_send { class HybridSendSpecCxx; }

// Forward declaration of `SendResult` to properly resolve imports.
namespace margelo::nitro::send { struct SendResult; }
// Forward declaration of `SendResponse` to properly resolve imports.
namespace margelo::nitro::send { struct SendResponse; }
// Forward declaration of `SendParameters` to properly resolve imports.
namespace margelo::nitro::send { struct SendParameters; }
// Forward declaration of `SendError` to properly resolve imports.
namespace margelo::nitro::send { struct SendError; }
// Forward declaration of `SendErrorCode` to properly resolve imports.
namespace margelo::nitro::send { enum class SendErrorCode; }
// Forward declaration of `SendRequest` to properly resolve imports.
namespace margelo::nitro::send { struct SendRequest; }
// Forward declaration of `SendMethod` to properly resolve imports.
namespace margelo::nitro::send { enum class SendMethod; }

#include <future>
#include "SendResult.hpp"
#include <NitroModules/PromiseHolder.hpp>
#include <optional>
#include "SendResponse.hpp"
#include "SendParameters.hpp"
#include <unordered_map>
#include <string>
#include "SendError.hpp"
#include "SendErrorCode.hpp"
#include "SendRequest.hpp"
#include "SendMethod.hpp"
#include <vector>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "candlefinance_send-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::send {

  /**
   * The C++ part of HybridSendSpecCxx.swift.
   *
   * HybridSendSpecSwift (C++) accesses HybridSendSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSendSpecCxx can directly inherit from the C++ class HybridSendSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSendSpecSwift final: public HybridSendSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridSendSpecSwift(const candlefinance_send::HybridSendSpecCxx& swiftPart):
      HybridObject(HybridSendSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline candlefinance_send::HybridSendSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::future<SendResult> send(const SendRequest& request) override {
      auto value = _swiftPart.send(request);
      return value.getFuture();
    }

  private:
    candlefinance_send::HybridSendSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::send
