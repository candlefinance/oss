///
/// JSendResult.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "SendResult.hpp"

#include "JSendError.hpp"
#include "JSendErrorCode.hpp"
#include "JSendParameters.hpp"
#include "JSendResponse.hpp"
#include "SendError.hpp"
#include "SendErrorCode.hpp"
#include "SendParameters.hpp"
#include "SendResponse.hpp"
#include <optional>
#include <string>
#include <unordered_map>

namespace margelo::nitro::send {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "SendResult" and the the Kotlin data class "SendResult".
   */
  struct JSendResult final: public jni::JavaClass<JSendResult> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/candlefinance_send/SendResult;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct SendResult by copying all values to C++.
     */
    [[maybe_unused]]
    SendResult toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldResponse = clazz->getField<JSendResponse>("response");
      jni::local_ref<JSendResponse> response = this->getFieldValue(fieldResponse);
      static const auto fieldError = clazz->getField<JSendError>("error");
      jni::local_ref<JSendError> error = this->getFieldValue(fieldError);
      return SendResult(
        response != nullptr ? std::make_optional(response->toCpp()) : std::nullopt,
        error != nullptr ? std::make_optional(error->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JSendResult::javaobject> fromCpp(const SendResult& value) {
      return newInstance(
        value.response.has_value() ? JSendResponse::fromCpp(value.response.value()) : nullptr,
        value.error.has_value() ? JSendError::fromCpp(value.error.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::send
