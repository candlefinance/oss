///
/// HybridCallbackSpec.swift
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A Swift protocol representing the Callback HybridObject.
 * Implement this protocol to create Swift-based instances of Callback.
 *
 * When implementing this protocol, make sure to initialize `hybridContext` - example:
 * ```
 * public class HybridCallback : HybridCallbackSpec {
 *   // Initialize HybridContext
 *   var hybridContext = margelo.nitro.HybridContext()
 *
 *   // Return size of the instance to inform JS GC about memory pressure
 *   var memorySize: Int {
 *     return getSizeOf(self)
 *   }
 *
 *   // ...
 * }
 * ```
 */
public protocol HybridCallbackSpec: HybridObjectSpec {
  // Properties
  

  // Methods
  func onEvent(notify: @escaping ((_ data: AnyMapHolder) -> Void)) throws -> Void
}

public extension HybridCallbackSpec {
  /**
   * Create a new instance of HybridCallbackSpecCxx for the given HybridCallbackSpec.
   *
   * Instances of HybridCallbackSpecCxx can be accessed from C++, and contain
   * additional required bridging code for C++ <> Swift interop.
   */
  func createCxxBridge() -> HybridCallbackSpecCxx {
    return HybridCallbackSpecCxx(self)
  }
}
