///
/// JRequest.hpp
/// Fri Aug 30 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Request.hpp"

#include "JMethod.hpp"
#include "JParameters.hpp"
#include "Method.hpp"
#include "Parameters.hpp"
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

namespace margelo::nitro::send {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Request" and the the Kotlin data class "Request".
   */
  struct JRequest final: public jni::JavaClass<JRequest> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/candlefinance_send/Request;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Request by copying all values to C++.
     */
    [[maybe_unused]]
    Request toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldBaseURL = clazz->getField<jni::JString>("baseURL");
      jni::local_ref<jni::JString> baseURL = this->getFieldValue(fieldBaseURL);
      static const auto fieldPath = clazz->getField<jni::JString>("path");
      jni::local_ref<jni::JString> path = this->getFieldValue(fieldPath);
      static const auto fieldQuery = clazz->getField<JParameters>("query");
      jni::local_ref<JParameters> query = this->getFieldValue(fieldQuery);
      static const auto fieldHeader = clazz->getField<JParameters>("header");
      jni::local_ref<JParameters> header = this->getFieldValue(fieldHeader);
      static const auto fieldMethod = clazz->getField<JMethod>("method");
      jni::local_ref<JMethod> method = this->getFieldValue(fieldMethod);
      static const auto fieldBody = clazz->getField<jni::JString>("body");
      jni::local_ref<jni::JString> body = this->getFieldValue(fieldBody);
      static const auto fieldUtf8ContentTypes = clazz->getField<jni::JArrayClass<jni::JString>>("utf8ContentTypes");
      jni::local_ref<jni::JArrayClass<jni::JString>> utf8ContentTypes = this->getFieldValue(fieldUtf8ContentTypes);
      return Request(
        baseURL->toStdString(),
        path->toStdString(),
        query->toCpp(),
        header->toCpp(),
        method->toCpp(),
        body != nullptr ? std::make_optional(body->toStdString()) : std::nullopt,
        [&]() {
          size_t size = utf8ContentTypes->size();
          std::vector<std::string> vector;
          vector.reserve(size);
          for (size_t i = 0; i < size; i++) {
            auto element = utf8ContentTypes->getElement(i);
            vector.push_back(element->toStdString());
          }
          return vector;
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JRequest::javaobject> fromCpp(const Request& value) {
      return newInstance(
        jni::make_jstring(value.baseURL),
        jni::make_jstring(value.path),
        JParameters::fromCpp(value.query),
        JParameters::fromCpp(value.header),
        JMethod::fromCpp(value.method),
        value.body.has_value() ? jni::make_jstring(value.body.value()) : nullptr,
        [&]() {
          size_t size = value.utf8ContentTypes.size();
          jni::local_ref<jni::JArrayClass<jni::JString>> array = jni::JArrayClass<jni::JString>::newArray(size);
          for (size_t i = 0; i < size; i++) {
            const auto& element = value.utf8ContentTypes[i];
            array->setElement(i, *jni::make_jstring(element));
          }
          return array;
        }()
      );
    }
  };

} // namespace margelo::nitro::send
