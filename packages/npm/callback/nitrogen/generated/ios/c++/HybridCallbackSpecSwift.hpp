///
/// HybridCallbackSpecSwift.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridCallbackSpec.hpp"

// Forward declaration of `HybridCallbackSpecCxx` to properly resolve imports.
namespace candlefinance_callback { class HybridCallbackSpecCxx; }

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <functional>
#include <NitroModules/AnyMap.hpp>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "candlefinance_callback-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::callback {

  /**
   * The C++ part of HybridCallbackSpecCxx.swift.
   *
   * HybridCallbackSpecSwift (C++) accesses HybridCallbackSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridCallbackSpecCxx can directly inherit from the C++ class HybridCallbackSpec
   * to simplify the whole structure and memory management.
   */
  class HybridCallbackSpecSwift final: public HybridCallbackSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridCallbackSpecSwift(const candlefinance_callback::HybridCallbackSpecCxx& swiftPart):
      HybridObject(HybridCallbackSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline candlefinance_callback::HybridCallbackSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void onEvent(const std::string& eventName, const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& data) override {
      _swiftPart.onEvent(eventName, data);
    }

  private:
    candlefinance_callback::HybridCallbackSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::callback
