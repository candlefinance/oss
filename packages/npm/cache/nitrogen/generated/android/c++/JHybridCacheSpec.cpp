///
/// JHybridCacheSpec.cpp
/// Fri Aug 30 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridCacheSpec.hpp"



#include <future>
#include <NitroModules/JPromise.hpp>
#include <optional>
#include <string>

namespace margelo::nitro::cache {

  jni::local_ref<JHybridCacheSpec::jhybriddata> JHybridCacheSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCacheSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCacheSpec::initHybrid),
    });
  }

  size_t JHybridCacheSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridCacheSpec::write(const std::string& key, const std::string& object) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* key */, jni::alias_ref<jni::JString> /* object */)>("write");
    method(_javaPart, jni::make_jstring(key), jni::make_jstring(object));
  }
  std::future<void> JHybridCacheSpec::writeAsync(const std::string& key, const std::string& object) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* key */, jni::alias_ref<jni::JString> /* object */)>("writeAsync");
    auto result = method(_javaPart, jni::make_jstring(key), jni::make_jstring(object));
    return [&]() {
      auto promise = std::make_shared<std::promise<void>>();
      result->cthis()->addOnResolvedListener([=](const jni::global_ref<jni::JObject>& boxedResult) {
        promise->set_value();
      });
      result->cthis()->addOnRejectedListener([=](const jni::global_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }
  std::future<std::optional<std::string>> JHybridCacheSpec::readAsync(const std::string& key) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* key */)>("readAsync");
    auto result = method(_javaPart, jni::make_jstring(key));
    return [&]() {
      auto promise = std::make_shared<std::promise<std::optional<std::string>>>();
      result->cthis()->addOnResolvedListener([=](const jni::global_ref<jni::JObject>& boxedResult) {
        auto result = jni::static_ref_cast<jni::JString>(boxedResult);
        promise->set_value(result != nullptr ? std::make_optional(result->toStdString()) : std::nullopt);
      });
      result->cthis()->addOnRejectedListener([=](const jni::global_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }
  std::optional<std::string> JHybridCacheSpec::read(const std::string& key) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<jni::JString>(jni::alias_ref<jni::JString> /* key */)>("read");
    auto result = method(_javaPart, jni::make_jstring(key));
    return result != nullptr ? std::make_optional(result->toStdString()) : std::nullopt;
  }
  std::future<void> JHybridCacheSpec::removeAsync(const std::string& key) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* key */)>("removeAsync");
    auto result = method(_javaPart, jni::make_jstring(key));
    return [&]() {
      auto promise = std::make_shared<std::promise<void>>();
      result->cthis()->addOnResolvedListener([=](const jni::global_ref<jni::JObject>& boxedResult) {
        promise->set_value();
      });
      result->cthis()->addOnRejectedListener([=](const jni::global_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }
  void JHybridCacheSpec::remove(const std::string& key) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* key */)>("remove");
    method(_javaPart, jni::make_jstring(key));
  }
  std::future<void> JHybridCacheSpec::clearAsync() {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JPromise::javaobject>()>("clearAsync");
    auto result = method(_javaPart);
    return [&]() {
      auto promise = std::make_shared<std::promise<void>>();
      result->cthis()->addOnResolvedListener([=](const jni::global_ref<jni::JObject>& boxedResult) {
        promise->set_value();
      });
      result->cthis()->addOnRejectedListener([=](const jni::global_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }
  void JHybridCacheSpec::clear() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("clear");
    method(_javaPart);
  }

} // namespace margelo::nitro::cache
