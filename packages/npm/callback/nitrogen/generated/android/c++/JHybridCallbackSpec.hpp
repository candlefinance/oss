///
/// HybridCallbackSpec.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridCallbackSpec.hpp"

namespace margelo::nitro::callback {

  using namespace facebook;

  class JHybridCallbackSpec final: public jni::HybridClass<JHybridCallbackSpec, JHybridObject>,
                                   public HybridCallbackSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/candlefinance_callback/HybridCallbackSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  private:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridCallbackSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridCallbackSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridCallbackSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    void onEvent(const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& notify) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridCallbackSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::callback
