///
/// Method.hpp
/// Wed Aug 28 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::send {

  /**
   * An enum which can be represented as a JavaScript union (Method).
   */
  enum class Method {
    GET      SWIFT_NAME(get) = 0,
    POST      SWIFT_NAME(post) = 1,
    PUT      SWIFT_NAME(put) = 2,
    DELETE      SWIFT_NAME(delete) = 3,
    PATCH      SWIFT_NAME(patch) = 4,
    HEAD      SWIFT_NAME(head) = 5,
    OPTIONS      SWIFT_NAME(options) = 6,
    CONNECT      SWIFT_NAME(connect) = 7,
    TRACE      SWIFT_NAME(trace) = 8,
  } CLOSED_ENUM;

} // namespace margelo::nitro::send

namespace margelo::nitro {

  using namespace margelo::nitro::send;

  // C++ Method <> JS Method (union)
  template <>
  struct JSIConverter<Method> {
    static inline Method fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("GET"): return Method::GET;
        case hashString("POST"): return Method::POST;
        case hashString("PUT"): return Method::PUT;
        case hashString("DELETE"): return Method::DELETE;
        case hashString("PATCH"): return Method::PATCH;
        case hashString("HEAD"): return Method::HEAD;
        case hashString("OPTIONS"): return Method::OPTIONS;
        case hashString("CONNECT"): return Method::CONNECT;
        case hashString("TRACE"): return Method::TRACE;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum Method - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, Method arg) {
      switch (arg) {
        case Method::GET: return JSIConverter<std::string>::toJSI(runtime, "GET");
        case Method::POST: return JSIConverter<std::string>::toJSI(runtime, "POST");
        case Method::PUT: return JSIConverter<std::string>::toJSI(runtime, "PUT");
        case Method::DELETE: return JSIConverter<std::string>::toJSI(runtime, "DELETE");
        case Method::PATCH: return JSIConverter<std::string>::toJSI(runtime, "PATCH");
        case Method::HEAD: return JSIConverter<std::string>::toJSI(runtime, "HEAD");
        case Method::OPTIONS: return JSIConverter<std::string>::toJSI(runtime, "OPTIONS");
        case Method::CONNECT: return JSIConverter<std::string>::toJSI(runtime, "CONNECT");
        case Method::TRACE: return JSIConverter<std::string>::toJSI(runtime, "TRACE");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert Method to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("GET"):
        case hashString("POST"):
        case hashString("PUT"):
        case hashString("DELETE"):
        case hashString("PATCH"):
        case hashString("HEAD"):
        case hashString("OPTIONS"):
        case hashString("CONNECT"):
        case hashString("TRACE"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
