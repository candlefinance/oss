///
/// SendRequest.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `SendParameters` to properly resolve imports.
namespace margelo::nitro::send { struct SendParameters; }
// Forward declaration of `SendMethod` to properly resolve imports.
namespace margelo::nitro::send { enum class SendMethod; }

#include <string>
#include "SendParameters.hpp"
#include "SendMethod.hpp"
#include <optional>
#include <vector>

namespace margelo::nitro::send {

  /**
   * A struct which can be represented as a JavaScript object (SendRequest).
   */
  struct SendRequest {
  public:
    std::string baseURL     SWIFT_PRIVATE;
    std::string path     SWIFT_PRIVATE;
    SendParameters query     SWIFT_PRIVATE;
    SendParameters header     SWIFT_PRIVATE;
    SendMethod method     SWIFT_PRIVATE;
    std::optional<std::string> body     SWIFT_PRIVATE;
    std::vector<std::string> utf8ContentTypes     SWIFT_PRIVATE;

  public:
    explicit SendRequest(std::string baseURL, std::string path, SendParameters query, SendParameters header, SendMethod method, std::optional<std::string> body, std::vector<std::string> utf8ContentTypes): baseURL(baseURL), path(path), query(query), header(header), method(method), body(body), utf8ContentTypes(utf8ContentTypes) {}
  };

} // namespace margelo::nitro::send

namespace margelo::nitro {

  using namespace margelo::nitro::send;

  // C++ SendRequest <> JS SendRequest (object)
  template <>
  struct JSIConverter<SendRequest> {
    static inline SendRequest fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SendRequest(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "baseURL")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "path")),
        JSIConverter<SendParameters>::fromJSI(runtime, obj.getProperty(runtime, "query")),
        JSIConverter<SendParameters>::fromJSI(runtime, obj.getProperty(runtime, "header")),
        JSIConverter<SendMethod>::fromJSI(runtime, obj.getProperty(runtime, "method")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "body")),
        JSIConverter<std::vector<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "utf8ContentTypes"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SendRequest& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "baseURL", JSIConverter<std::string>::toJSI(runtime, arg.baseURL));
      obj.setProperty(runtime, "path", JSIConverter<std::string>::toJSI(runtime, arg.path));
      obj.setProperty(runtime, "query", JSIConverter<SendParameters>::toJSI(runtime, arg.query));
      obj.setProperty(runtime, "header", JSIConverter<SendParameters>::toJSI(runtime, arg.header));
      obj.setProperty(runtime, "method", JSIConverter<SendMethod>::toJSI(runtime, arg.method));
      obj.setProperty(runtime, "body", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.body));
      obj.setProperty(runtime, "utf8ContentTypes", JSIConverter<std::vector<std::string>>::toJSI(runtime, arg.utf8ContentTypes));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "baseURL"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "path"))) return false;
      if (!JSIConverter<SendParameters>::canConvert(runtime, obj.getProperty(runtime, "query"))) return false;
      if (!JSIConverter<SendParameters>::canConvert(runtime, obj.getProperty(runtime, "header"))) return false;
      if (!JSIConverter<SendMethod>::canConvert(runtime, obj.getProperty(runtime, "method"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "body"))) return false;
      if (!JSIConverter<std::vector<std::string>>::canConvert(runtime, obj.getProperty(runtime, "utf8ContentTypes"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
