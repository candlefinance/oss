///
/// JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include <NitroModules/AnyMap.hpp>
#include "JFunc_void_std__shared_ptr_AnyMap_.hpp"
#include <NitroModules/JAnyMap.hpp>

namespace margelo::nitro::callback {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_void_std__function_void_const_std__shared_ptr_AnyMap______data_____.
   * This is a Kotlin `(data: (data: AnyMap) -> Unit) -> Unit`, backed by a `std::function<...>`.
   */
  struct JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____ final: public jni::HybridClass<JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____> {
  public:
    static jni::local_ref<JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____::javaobject> fromCpp(const std::function<void(const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& /* data */)>& func) {
      return JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____::newObjectCxxArgs(func);
    }

  public:
    void call(const jni::alias_ref<JFunc_void_std__shared_ptr_AnyMap_::javaobject>& data) {
      return _func(data->toCpp());
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/candlefinance_callback/Func_void_std__function_void_const_std__shared_ptr_AnyMap______data_____;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____::call)});
    }

  private:
    explicit JFunc_void_std__function_void_const_std__shared_ptr_AnyMap______data_____(const std::function<void(const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& /* data */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& /* data */)> _func;
  };

} // namespace margelo::nitro::callback
