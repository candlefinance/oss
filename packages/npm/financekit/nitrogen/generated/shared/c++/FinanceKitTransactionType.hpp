///
/// FinanceKitTransactionType.hpp
/// Sat Aug 31 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::financekit {

  /**
   * An enum which can be represented as a JavaScript union (FinanceKitTransactionType).
   */
  enum class FinanceKitTransactionType {
    UNKNOWN      SWIFT_NAME(unknown) = 0,
    ADJUSTMENT      SWIFT_NAME(adjustment) = 1,
    ATM      SWIFT_NAME(atm) = 2,
    BILLPAYMENT      SWIFT_NAME(billpayment) = 3,
    CHECK      SWIFT_NAME(check) = 4,
    DEPOSIT      SWIFT_NAME(deposit) = 5,
    DIRECTDEPOSIT      SWIFT_NAME(directdeposit) = 6,
    DIVIDEND      SWIFT_NAME(dividend) = 7,
    FEE      SWIFT_NAME(fee) = 8,
    INTEREST      SWIFT_NAME(interest) = 9,
    POINTOFSALE      SWIFT_NAME(pointofsale) = 10,
    TRANSFER      SWIFT_NAME(transfer) = 11,
    WITHDRAWAL      SWIFT_NAME(withdrawal) = 12,
    STANDINGORDER      SWIFT_NAME(standingorder) = 13,
    DIRECTDEBIT      SWIFT_NAME(directdebit) = 14,
    LOAN      SWIFT_NAME(loan) = 15,
    REFUND      SWIFT_NAME(refund) = 16,
  } CLOSED_ENUM;

} // namespace margelo::nitro::financekit

namespace margelo::nitro {

  using namespace margelo::nitro::financekit;

  // C++ FinanceKitTransactionType <> JS FinanceKitTransactionType (union)
  template <>
  struct JSIConverter<FinanceKitTransactionType> {
    static inline FinanceKitTransactionType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("unknown"): return FinanceKitTransactionType::UNKNOWN;
        case hashString("adjustment"): return FinanceKitTransactionType::ADJUSTMENT;
        case hashString("atm"): return FinanceKitTransactionType::ATM;
        case hashString("billPayment"): return FinanceKitTransactionType::BILLPAYMENT;
        case hashString("check"): return FinanceKitTransactionType::CHECK;
        case hashString("deposit"): return FinanceKitTransactionType::DEPOSIT;
        case hashString("directDeposit"): return FinanceKitTransactionType::DIRECTDEPOSIT;
        case hashString("dividend"): return FinanceKitTransactionType::DIVIDEND;
        case hashString("fee"): return FinanceKitTransactionType::FEE;
        case hashString("interest"): return FinanceKitTransactionType::INTEREST;
        case hashString("pointOfSale"): return FinanceKitTransactionType::POINTOFSALE;
        case hashString("transfer"): return FinanceKitTransactionType::TRANSFER;
        case hashString("withdrawal"): return FinanceKitTransactionType::WITHDRAWAL;
        case hashString("standingOrder"): return FinanceKitTransactionType::STANDINGORDER;
        case hashString("directDebit"): return FinanceKitTransactionType::DIRECTDEBIT;
        case hashString("loan"): return FinanceKitTransactionType::LOAN;
        case hashString("refund"): return FinanceKitTransactionType::REFUND;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum FinanceKitTransactionType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, FinanceKitTransactionType arg) {
      switch (arg) {
        case FinanceKitTransactionType::UNKNOWN: return JSIConverter<std::string>::toJSI(runtime, "unknown");
        case FinanceKitTransactionType::ADJUSTMENT: return JSIConverter<std::string>::toJSI(runtime, "adjustment");
        case FinanceKitTransactionType::ATM: return JSIConverter<std::string>::toJSI(runtime, "atm");
        case FinanceKitTransactionType::BILLPAYMENT: return JSIConverter<std::string>::toJSI(runtime, "billPayment");
        case FinanceKitTransactionType::CHECK: return JSIConverter<std::string>::toJSI(runtime, "check");
        case FinanceKitTransactionType::DEPOSIT: return JSIConverter<std::string>::toJSI(runtime, "deposit");
        case FinanceKitTransactionType::DIRECTDEPOSIT: return JSIConverter<std::string>::toJSI(runtime, "directDeposit");
        case FinanceKitTransactionType::DIVIDEND: return JSIConverter<std::string>::toJSI(runtime, "dividend");
        case FinanceKitTransactionType::FEE: return JSIConverter<std::string>::toJSI(runtime, "fee");
        case FinanceKitTransactionType::INTEREST: return JSIConverter<std::string>::toJSI(runtime, "interest");
        case FinanceKitTransactionType::POINTOFSALE: return JSIConverter<std::string>::toJSI(runtime, "pointOfSale");
        case FinanceKitTransactionType::TRANSFER: return JSIConverter<std::string>::toJSI(runtime, "transfer");
        case FinanceKitTransactionType::WITHDRAWAL: return JSIConverter<std::string>::toJSI(runtime, "withdrawal");
        case FinanceKitTransactionType::STANDINGORDER: return JSIConverter<std::string>::toJSI(runtime, "standingOrder");
        case FinanceKitTransactionType::DIRECTDEBIT: return JSIConverter<std::string>::toJSI(runtime, "directDebit");
        case FinanceKitTransactionType::LOAN: return JSIConverter<std::string>::toJSI(runtime, "loan");
        case FinanceKitTransactionType::REFUND: return JSIConverter<std::string>::toJSI(runtime, "refund");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert FinanceKitTransactionType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("unknown"):
        case hashString("adjustment"):
        case hashString("atm"):
        case hashString("billPayment"):
        case hashString("check"):
        case hashString("deposit"):
        case hashString("directDeposit"):
        case hashString("dividend"):
        case hashString("fee"):
        case hashString("interest"):
        case hashString("pointOfSale"):
        case hashString("transfer"):
        case hashString("withdrawal"):
        case hashString("standingOrder"):
        case hashString("directDebit"):
        case hashString("loan"):
        case hashString("refund"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
