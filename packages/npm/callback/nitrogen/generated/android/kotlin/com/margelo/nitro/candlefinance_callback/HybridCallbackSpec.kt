///
/// HybridCallbackSpec.kt
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

package com.margelo.nitro.candlefinance_callback

import android.util.Log
import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the Callback HybridObject.
 * Implement this abstract class to create Kotlin-based instances of Callback.
 */
@DoNotStrip
@Keep
@Suppress("RedundantSuppression", "KotlinJniMissingFunction", "PropertyName", "RedundantUnitReturnType", "unused")
abstract class HybridCallbackSpec: HybridObject() {
  protected val TAG = "HybridCallbackSpec"

  @DoNotStrip
  val mHybridData: HybridData = initHybrid()

  init {
    // Pass this `HybridData` through to it's base class,
    // to represent inheritance to JHybridObject on C++ side
    super.updateNative(mHybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun onEvent(eventName: String, data: (data: AnyMap) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onEvent(eventName: String, data: Func_void_std__shared_ptr_AnyMap_): Unit {
    val result = onEvent(eventName, data.toLambda())
    return result
  }

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridCallbackSpec"
    init {
      try {
        Log.i(TAG, "Loading callback C++ library...")
        System.loadLibrary("callback")
        Log.i(TAG, "Successfully loaded callback C++ library!")
      } catch (e: Error) {
        Log.e(TAG, "Failed to load callback C++ library! Is it properly installed and linked? " +
                    "Is the name correct? (see `CMakeLists.txt`, at `add_library(...)`)", e)
        throw e
      }
    }
  }
}
