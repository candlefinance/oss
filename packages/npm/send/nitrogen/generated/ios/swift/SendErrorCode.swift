///
/// SendErrorCode.swift
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

/**
 * Represents the JS enum `SendErrorCode`, backed by a C++ enum.
 */
public typealias SendErrorCode = margelo.nitro.send.SendErrorCode

public extension SendErrorCode {
  /**
   * Get a SendErrorCode for the given String value, or
   * return `nil` if the given value was invalid/unknown.
   */
  init?(fromString string: String) {
    switch string {
      case "RESPONSE_INVALID":
        self = .responseInvalid
      case "REQUEST_INVALID":
        self = .requestInvalid
      case "NETWORK_ERROR":
        self = .networkError
      case "NO_RESPONSE":
        self = .noResponse
      case "NON_UTF8_RESPONSE_BODY":
        self = .nonUtf8ResponseBody
      case "NON_UTF8_REQUEST_BODY":
        self = .nonUtf8RequestBody
      case "INVALID_REQUEST_PATH_OR_QUERY_PARAMETERS":
        self = .invalidRequestPathOrQueryParameters
      case "INVALID_REQUEST_BASE_URL":
        self = .invalidRequestBaseUrl
      case "NON_BASE64_REQUEST_BODY":
        self = .nonBase64RequestBody
      case "INVALID_RESPONSE_HEADER_PARAMETERS":
        self = .invalidResponseHeaderParameters
      case "UNEXPECTED":
        self = .unexpected
      default:
        return nil
    }
  }

  /**
   * Get the String value this SendErrorCode represents.
   */
  var stringValue: String {
    switch self {
      case .responseInvalid:
        return "RESPONSE_INVALID"
      case .requestInvalid:
        return "REQUEST_INVALID"
      case .networkError:
        return "NETWORK_ERROR"
      case .noResponse:
        return "NO_RESPONSE"
      case .nonUtf8ResponseBody:
        return "NON_UTF8_RESPONSE_BODY"
      case .nonUtf8RequestBody:
        return "NON_UTF8_REQUEST_BODY"
      case .invalidRequestPathOrQueryParameters:
        return "INVALID_REQUEST_PATH_OR_QUERY_PARAMETERS"
      case .invalidRequestBaseUrl:
        return "INVALID_REQUEST_BASE_URL"
      case .nonBase64RequestBody:
        return "NON_BASE64_REQUEST_BODY"
      case .invalidResponseHeaderParameters:
        return "INVALID_RESPONSE_HEADER_PARAMETERS"
      case .unexpected:
        return "UNEXPECTED"
    }
  }
}
