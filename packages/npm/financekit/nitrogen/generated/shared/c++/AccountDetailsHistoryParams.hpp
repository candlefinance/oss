///
/// AccountDetailsHistoryParams.hpp
/// Sat Aug 31 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::financekit {

  /**
   * A struct which can be represented as a JavaScript object (AccountDetailsHistoryParams).
   */
  struct AccountDetailsHistoryParams {
  public:
    std::string accountID     SWIFT_PRIVATE;
    std::string token     SWIFT_PRIVATE;
    bool isMonitoring     SWIFT_PRIVATE;

  public:
    explicit AccountDetailsHistoryParams(std::string accountID, std::string token, bool isMonitoring): accountID(accountID), token(token), isMonitoring(isMonitoring) {}
  };

} // namespace margelo::nitro::financekit

namespace margelo::nitro {

  using namespace margelo::nitro::financekit;

  // C++ AccountDetailsHistoryParams <> JS AccountDetailsHistoryParams (object)
  template <>
  struct JSIConverter<AccountDetailsHistoryParams> {
    static inline AccountDetailsHistoryParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AccountDetailsHistoryParams(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "accountID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "token")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isMonitoring"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AccountDetailsHistoryParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "accountID", JSIConverter<std::string>::toJSI(runtime, arg.accountID));
      obj.setProperty(runtime, "token", JSIConverter<std::string>::toJSI(runtime, arg.token));
      obj.setProperty(runtime, "isMonitoring", JSIConverter<bool>::toJSI(runtime, arg.isMonitoring));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "accountID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "token"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isMonitoring"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
