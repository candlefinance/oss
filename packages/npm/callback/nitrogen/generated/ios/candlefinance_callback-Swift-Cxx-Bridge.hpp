///
/// candlefinance_callback-Swift-Cxx-Bridge.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

// Include C++ defined types
#include <NitroModules/AnyMap.hpp>
#include <functional>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::callback::bridge::swift {

  /**
   * Specialized version of `std::function<void(const std::shared_ptr<AnyMap>& / * data * /)>`.
   */
  using Func_void_std__shared_ptr_AnyMap_ = std::function<void(const std::shared_ptr<AnyMap>& /* data */)>;
  inline Func_void_std__shared_ptr_AnyMap_ create_Func_void_std__shared_ptr_AnyMap_(void* closureHolder, void(*call)(void* /* closureHolder */, std::shared_ptr<AnyMap>), void(*destroy)(void*)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return [sharedClosureHolder, call](const std::shared_ptr<AnyMap>& data) -> void {
      call(sharedClosureHolder.get(), data);
    };
  }
  inline std::shared_ptr<Func_void_std__shared_ptr_AnyMap_> share_Func_void_std__shared_ptr_AnyMap_(const Func_void_std__shared_ptr_AnyMap_& value) {
    return std::make_shared<Func_void_std__shared_ptr_AnyMap_>(value);
  }

} // namespace margelo::nitro::callback::bridge::swift
