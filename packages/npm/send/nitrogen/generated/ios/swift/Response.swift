///
/// Response.swift
/// Wed Aug 28 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Response`, backed by a C++ struct.
 */
public typealias Response = margelo.nitro.send.Response

public extension Response {
  private typealias bridge = margelo.nitro.send.bridge.swift

  /**
   * Create a new instance of `Response`.
   */
  init(statusCode: Double, headerParameters: Dictionary<String, String>, body: String?) {
    self.init(statusCode, { () -> bridge.std__unordered_map_std__string__std__string_ in
      var map = bridge.create_std__unordered_map_std__string__std__string_(headerParameters.count)
      for (k, v) in headerParameters {
        map[std.string(k)] = std.string(v)
      }
      return map
    }(), { () -> bridge.std__optional_std__string_ in
      if let actualValue = body {
        return bridge.create_std__optional_std__string_(std.string(actualValue))
      } else {
        return .init()
      }
    }())
  }

  var statusCode: Double {
    @inline(__always)
    get {
      return self.__statusCode
    }
    @inline(__always)
    set {
      self.__statusCode = newValue
    }
  }
  
  var headerParameters: Dictionary<String, String> {
    @inline(__always)
    get {
      return { () -> Dictionary<String, String> in
        var dictionary = Dictionary<String, String>(minimumCapacity: self.__headerParameters.size())
        let keys = bridge.get_std__unordered_map_std__string__std__string__keys(self.__headerParameters)
        for key in keys {
          let value = self.__headerParameters[key]
          dictionary[String(key)] = String(value!)
        }
        return dictionary
      }()
    }
    @inline(__always)
    set {
      self.__headerParameters = { () -> bridge.std__unordered_map_std__string__std__string_ in
        var map = bridge.create_std__unordered_map_std__string__std__string_(newValue.count)
        for (k, v) in newValue {
          map[std.string(k)] = std.string(v)
        }
        return map
      }()
    }
  }
  
  var body: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let actualValue = self.__body.value {
          return String(actualValue)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__body = { () -> bridge.std__optional_std__string_ in
        if let actualValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(actualValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
