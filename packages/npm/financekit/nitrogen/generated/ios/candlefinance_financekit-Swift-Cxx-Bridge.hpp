///
/// candlefinance_financekit-Swift-Cxx-Bridge.hpp
/// Sat Aug 31 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `Account` to properly resolve imports.
namespace margelo::nitro::financekit { struct Account; }
// Forward declaration of `AuthorizationStatus` to properly resolve imports.
namespace margelo::nitro::financekit { enum class AuthorizationStatus; }
// Forward declaration of `FinanceKitAccountBalance` to properly resolve imports.
namespace margelo::nitro::financekit { struct FinanceKitAccountBalance; }
// Forward declaration of `FinanceKitTransaction` to properly resolve imports.
namespace margelo::nitro::financekit { struct FinanceKitTransaction; }

// Include C++ defined types
#include "Account.hpp"
#include "AuthorizationStatus.hpp"
#include "FinanceKitAccountBalance.hpp"
#include "FinanceKitTransaction.hpp"
#include <NitroModules/PromiseHolder.hpp>
#include <future>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::financekit::bridge::swift {

  /**
   * Specialized version of `PromiseHolder<AuthorizationStatus>`.
   */
  using PromiseHolder_AuthorizationStatus_ = PromiseHolder<AuthorizationStatus>;
  inline PromiseHolder<AuthorizationStatus> create_PromiseHolder_AuthorizationStatus_() {
    return PromiseHolder<AuthorizationStatus>();
  }
  
  /**
   * Specialized version of `std::vector<FinanceKitTransaction>`.
   */
  using std__vector_FinanceKitTransaction_ = std::vector<FinanceKitTransaction>;
  inline std::vector<FinanceKitTransaction> create_std__vector_FinanceKitTransaction_(size_t size) {
    std::vector<FinanceKitTransaction> vector;
    vector.reserve(size);
    return vector;
  }
  
  /**
   * Specialized version of `PromiseHolder<std::vector<FinanceKitTransaction>>`.
   */
  using PromiseHolder_std__vector_FinanceKitTransaction__ = PromiseHolder<std::vector<FinanceKitTransaction>>;
  inline PromiseHolder<std::vector<FinanceKitTransaction>> create_PromiseHolder_std__vector_FinanceKitTransaction__() {
    return PromiseHolder<std::vector<FinanceKitTransaction>>();
  }
  
  /**
   * Specialized version of `std::vector<Account>`.
   */
  using std__vector_Account_ = std::vector<Account>;
  inline std::vector<Account> create_std__vector_Account_(size_t size) {
    std::vector<Account> vector;
    vector.reserve(size);
    return vector;
  }
  
  /**
   * Specialized version of `PromiseHolder<std::vector<Account>>`.
   */
  using PromiseHolder_std__vector_Account__ = PromiseHolder<std::vector<Account>>;
  inline PromiseHolder<std::vector<Account>> create_PromiseHolder_std__vector_Account__() {
    return PromiseHolder<std::vector<Account>>();
  }
  
  /**
   * Specialized version of `std::vector<FinanceKitAccountBalance>`.
   */
  using std__vector_FinanceKitAccountBalance_ = std::vector<FinanceKitAccountBalance>;
  inline std::vector<FinanceKitAccountBalance> create_std__vector_FinanceKitAccountBalance_(size_t size) {
    std::vector<FinanceKitAccountBalance> vector;
    vector.reserve(size);
    return vector;
  }
  
  /**
   * Specialized version of `PromiseHolder<std::vector<FinanceKitAccountBalance>>`.
   */
  using PromiseHolder_std__vector_FinanceKitAccountBalance__ = PromiseHolder<std::vector<FinanceKitAccountBalance>>;
  inline PromiseHolder<std::vector<FinanceKitAccountBalance>> create_PromiseHolder_std__vector_FinanceKitAccountBalance__() {
    return PromiseHolder<std::vector<FinanceKitAccountBalance>>();
  }

} // namespace margelo::nitro::financekit::bridge::swift
