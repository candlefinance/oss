///
/// JHybridCallbackSpec.cpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridCallbackSpec.hpp"

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <functional>
#include <NitroModules/AnyMap.hpp>
#include "JFunc_void_std__shared_ptr_AnyMap_.hpp"
#include <NitroModules/JAnyMap.hpp>

namespace margelo::nitro::callback {

  jni::local_ref<JHybridCallbackSpec::jhybriddata> JHybridCallbackSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCallbackSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCallbackSpec::initHybrid),
    });
  }

  size_t JHybridCallbackSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridCallbackSpec::onEvent(const std::string& eventName, const std::function<void(const std::shared_ptr<AnyMap>& /* data */)>& data) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* eventName */, jni::alias_ref<JFunc_void_std__shared_ptr_AnyMap_::javaobject> /* data */)>("onEvent");
    method(_javaPart, jni::make_jstring(eventName), JFunc_void_std__shared_ptr_AnyMap_::fromCpp(data));
  }

} // namespace margelo::nitro::callback
